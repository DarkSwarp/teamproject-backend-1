{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "Goose Track API Documentation",
    "description": "This is a REST API's for project Goose Track. [GitHub](https://github.com/HannaVakulenko/teamproject-backend-1) \n\n It is the task tracker with personal to-do list. \nThe project provides for the possibility of user registration, authentication and authorization. In addition, users can create and track their tasks, assign them by completion status, view their completion statistics over a period of time, and edit and delete their tasks. \n\n**Functional capabilities:**\n\nUser registration and authorization\n\nAbility to edit user profile and add review\n\nAdd, view, edit and delete tasks\n\nTask selection by date, possibility to determine/redefine priority and execution status\n\nDisplay of statistics for a certain period by execution statuses\n\nAbility to display the tasks on the calendar\n\nAbility to display tasks in a list by execution status\n\n**The technology stack used in the project:**\n\nNode.js - JavaScript runtime on the server\n\nExpress.js - a framework for developing web applications on Node.js\n\nMongoDB - NoSQL Database\n\nMongoose - a library for working with MongoDB in Node.js"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://goose-track-gr25.onrender.com"
    },
    {
      "url": "http://localhost:8080"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Reviews",
      "description": "Reviews endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "User with this email is already exist"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Email or password invalid"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "minLength": 3,
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 7,
            "example": "qwertonity"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 7,
            "example": "qwertonity"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token for authorization",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDYwMTRiMzBmZTlhODA2NDI5ZDFmNCIsImlhdCI6MTY5MTc0NjYzNSwiZXhwIjoxNjkxODI5NDM1fQ.dAtkjqFYB_I4r6vBHWY6d2A2kSuDpkRle9wXfG7mw1A"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "BearerFormat": "JWT"
      }
    }
  }
}
