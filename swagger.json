{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.1",
    "title": "Goose Track API Documentation",
    "description": "This is a REST API's for project Goose Track. [GitHub](https://github.com/HannaVakulenko/teamproject-backend-1) \n\n It is the task tracker with personal to-do list. \nThe project provides for the possibility of user registration, authentication and authorization. In addition, users can create and track their tasks, assign them by completion status, view their completion statistics over a period of time, and edit and delete their tasks. \n\n**Functional capabilities:**\n\nUser registration and authorization\n\nAbility to edit user profile and add review\n\nAdd, view, edit and delete tasks\n\nTask selection by date, possibility to determine/redefine priority and execution status\n\nDisplay of statistics for a certain period by execution statuses\n\nAbility to display the tasks on the calendar\n\nAbility to display tasks in a list by execution status\n\n**The technology stack used in the project:**\n\nNode.js - JavaScript runtime on the server\n\nExpress.js - a framework for developing web applications on Node.js\n\nMongoDB - NoSQL Database\n\nMongoose - a library for working with MongoDB in Node.js"
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://goose-track-gr25.onrender.com/api"
    },
    {
      "url": "http://localhost:8080/api"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Reviews",
      "description": "Reviews endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "409": {
            "description": "User with this email is already exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Email or password invalid"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Logout success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/account": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user profile info",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UserGetInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": ["Auth"],
        "summary": "update user profile info",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User changes profile object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/reviews": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get all reviews of all users",

        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewsArrayResponse"
                }
              }
            }
          },
          "404": {
            "description": "There are currently no reviews"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/reviews/own": {
      "get": {
        "tags": ["Reviews"],
        "summary": "Get own review to the user",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/OwnReviewGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Reviews"],
        "summary": "Set own review to the user",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Set own user`s review object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnReviewSetRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnReviewSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "You already have review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": ["Reviews"],
        "summary": "Update own user review",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User`s review update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnReviewUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnReviewUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Reviews"],
        "summary": "Delete own user review",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "review deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

 
    "/tasks": {
      "get": {
        "tags": ["Tasks"],
        "summary": "Get all user`s tasks per month",
        "description": "This can only be done by the logged in user.",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/TaskArrayGetMonthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": ["Tasks"],
        "summary": "Set user`s task",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Set user`s task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSetRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Set user`s task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "Update task",
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Task's id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Task update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["Tasks"],
        "summary": "Delete task",
        "description": "This can only be done by the logged in user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Task's id"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "task deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "example": "Error response object",
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error description",
            "example": "Here is the error message!"
          }
        }
      },
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 7,
            "example": "qwertonity"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "theme": {
            "type": "string",
            "description": "Theme (light/dark) display of the user's private page",
            "example": "dark"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "token": {
            "type": "string",
            "description": "Access token for authorization",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDYwMTRiMzBmZTlhODA2NDI5ZDFmNCIsImlhdCI6MTY5MTc0NjYzNSwiZXhwIjoxNjkxODI5NDM1fQ.dAtkjqFYB_I4r6vBHWY6d2A2kSuDpkRle9wXfG7mw1A"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 7,
            "example": "qwertonity"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "theme": {
            "type": "string",
            "description": "Theme (light/dark) display of the user's private page",
            "example": "dark"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$",
            "format": "email"
          },
          "token": {
            "type": "string",
            "description": "Access token for authorization",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDYwMTRiMzBmZTlhODA2NDI5ZDFmNCIsImlhdCI6MTY5MTc0NjYzNSwiZXhwIjoxNjkxODI5NDM1fQ.dAtkjqFYB_I4r6vBHWY6d2A2kSuDpkRle9wXfG7mw1A"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Access token for authorization",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDYwMTRiMzBmZTlhODA2NDI5ZDFmNCIsImlhdCI6MTY5MTc0NjYzNSwiZXhwIjoxNjkxODI5NDM1fQ.dAtkjqFYB_I4r6vBHWY6d2A2kSuDpkRle9wXfG7mw1A"
          }
        }
      },
      "UserGetInfoResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar",
            "example": "http://res.cloudinary.com/dici0468p/image/upload/v1692016055/Luka_avatar.png"
          },
          "skype": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "minLength": 7,
            "example": "qwertonity"
          },
          "avatarURL": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar",
            "example": "http://res.cloudinary.com/dici0468p/image/upload/v1692017234/404-mob-1x.webp"
          },
          "skype": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UserUpdateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Bob Smith"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "skype": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date"
          },
          "avatarURL": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar",
            "example": "http://res.cloudinary.com/dici0468p/image/upload/v1692016055/Luka_avatar.png"
          },
          "theme": {
            "type": "string",
            "description": "Theme (light/dark) display of the user's private page",
            "example": "dark"
          }
        }
      },
      "ReviewsArrayResponse": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "description": "Array of all user's reviews",
            "items": {
              "type": "object",
              "required": ["review", "rating"],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Review database id",
                  "example": "64d7869a9244fdaf11cad0af"
                },
                "review": {
                  "type": "string",
                  "description": "User review",
                  "maxLength": 300,
                  "example": "This is a very useful web application"
                },
                "rating": {
                  "type": "number",
                  "description": "User's rating",
                  "maxLength": 1,
                  "example": 3
                },
                "owner": {
                  "type": "string",
                  "description": "User's database id",
                  "example": "64d7869a9244fdaf11cad0af"
                },
                "name": {
                  "type": "string",
                  "description": "User's name",
                  "example": "Bob Smith"
                },
                "avatarURL": {
                  "type": "string",
                  "format": "uri",
                  "description": "User's avatar",
                  "example": "http://res.cloudinary.com/dici0468p/image/upload/v1692016055/Luka_avatar.png"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          "total": {
            "type": "number",
            "description": "Total review`s count",
            "example": 6
          }
        }
      },
      "OwnReviewGetResponse": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "description": "Array of all user's reviews",
            "items": {
              "type": "object",
              "required": ["review", "rating"],
              "properties": {
                "review": {
                  "type": "string",
                  "description": "User review",
                  "maxLength": 300,
                  "example": "This is a very useful web application"
                },
                "rating": {
                  "type": "number",
                  "description": "User's rating",
                  "maxLength": 1,
                  "example": 3
                }
              }
            }
          }
        }
      },
      "OwnReviewSetRequest": {
        "type": "object",
        "required": ["review", "rating"],
        "properties": {
          "review": {
            "type": "string",
            "description": "User review",
            "maxLength": 300,
            "example": "This is a very useful web application"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 4
          }
        }
      },
      "OwnReviewSetResponse": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "description": "Array of all user's reviews",
            "items": {
              "type": "object",
              "required": ["review", "rating"],
              "properties": {
                "review": {
                  "type": "string",
                  "description": "User review",
                  "maxLength": 300,
                  "example": "This is a very useful web application"
                },
                "rating": {
                  "type": "number",
                  "description": "User's rating",
                  "maxLength": 1,
                  "example": 3
                }
              }
            }
          }
        }
      },
      "OwnReviewUpdateRequest": {
        "type": "object",
        "properties": {
          "review": {
            "type": "string",
            "description": "User review",
            "maxLength": 300,
            "example": "This is a very useful web application"
          },
          "rating": {
            "type": "number",
            "description": "User's rating",
            "maxLength": 1,
            "example": 5
          }
        }
      },
      "OwnReviewUpdateResponse": {
        "type": "object",
        "properties": {
          "reviews": {
            "type": "array",
            "description": "Array of all user's reviews",
            "items": {
              "type": "object",
              "required": ["review", "rating"],
              "properties": {
                "review": {
                  "type": "string",
                  "description": "User review",
                  "maxLength": 300,
                  "example": "This is a very useful web application"
                },
                "rating": {
                  "type": "number",
                  "description": "User's rating",
                  "maxLength": 1,
                  "example": 3
                }
              }
            }
          }
        }
      },
      "TaskArrayGetMonthResponse": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "description": "Array of all user's tasks per month",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Task database id",
                  "example": "64d7869a9244fdaf11cad0af"
                },
                "title": {
                  "type": "string",
                  "description": "Task title",
                  "maxLength": 250,
                  "example": "To do something"
                },
                "priority": {
                  "type": "string",
                  "enum": ["low", "medium", "high"],
                  "default": "low",
                  "description": "Task priority"
                },
                "category": {
                  "type": "string",
                  "enum": ["To do", "In progress", "Done"],
                  "default": "To do",
                  "description": "Task category"
                },
                "start": {
                  "type": "string",
                  "format": "time",
                  "example": "09:30",
                  "description": "Start time"
                },
                "end": {
                  "type": "string",
                  "format": "time",
                  "example": "18:30",
                  "description": "Finish time"
                },
                "date": {
                  "type": "string",
                  "format": "date",
                  "example": "2023-08-22",
                  "description": "When tasks are performed"
                },
                "owner": {
                  "type": "string",
                  "description": "User's database id",
                  "example": "64d7869a9244fdaf11cad0af"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          "avatarURL": {
            "type": "string",
            "format": "uri",
            "description": "User's avatar",
            "example": "http://res.cloudinary.com/dici0468p/image/upload/v1692016055/Luka_avatar.png"
          }
        }
      },
      "TaskSetRequest": {
        "type": "object",
        "required": ["title", "priority", "category", "start", "end", "date"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Task database id",
            "example": "64d7869a9244fdaf11cad0af"
          },
          "title": {
            "type": "string",
            "description": "Task title",
            "maxLength": 250,
            "example": "To do something"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "low",
            "description": "Task priority"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Start time"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "18:30",
            "description": "Finish time"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-08-22",
            "description": "When tasks are performed"
          }
        }
      },
      "TaskSetResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task title",
            "maxLength": 250,
            "example": "To do something"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "low",
            "description": "Task priority"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Start time"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "18:30",
            "description": "Finish time"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-08-22",
            "description": "When tasks are performed"
          },
          "owner": {
            "type": "string",
            "description": "User's database id",
            "example": "64d7869a9244fdaf11cad0af"
          },
          "_id": {
            "type": "string",
            "description": "Task database id",
            "example": "64d7869a9244fdaf11cad0af"
          },
          "createdAt": {
            "type": "string",
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "TaskUpdateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Task title",
            "maxLength": 250,
            "example": "To do something"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "low",
            "description": "Task priority"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Start time"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "18:30",
            "description": "Finish time"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-08-22",
            "description": "When tasks are performed"
          }
        }
      },
      "TaskUpdateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Task database id",
            "example": "64d7869a9244fdaf11cad0af"
          },
          "title": {
            "type": "string",
            "description": "Task title",
            "maxLength": 250,
            "example": "To do something"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "default": "low",
            "description": "Task priority"
          },
          "category": {
            "type": "string",
            "enum": ["To do", "In progress", "Done"],
            "default": "To do",
            "description": "Task category"
          },
          "start": {
            "type": "string",
            "format": "time",
            "example": "09:30",
            "description": "Start time"
          },
          "end": {
            "type": "string",
            "format": "time",
            "example": "18:30",
            "description": "Finish time"
          },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-08-22",
            "description": "When tasks are performed"
          },
          "createdAt": {
            "type": "string",
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "BearerFormat": "JWT"
      }
    }
  }
}
